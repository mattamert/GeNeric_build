# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file is a (heavily modified) version of Chromium's Windows toolchain.

declare_args() {
  clang_base_path = "C:\Program Files\LLVM"
}

# copied from Chromium's //build/toolchain/toolchain.gni & modified
stamp_description = "STAMP {{output}}"
copy_description = "COPY {{source}} {{output}}"
if (host_os == "win") {
  stamp_command = "cmd /c type nul > \"{{output}}\""
  copy_command = "cmd /c copy /y {{source}} {{output}}"
} else {
  stamp_command = "touch {{output}}"
  copy_command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
}

# Shared toolchain definition. Invocations should set current_os to set the
# build args in this definition.
template("win_toolchain") {
  toolchain(target_name) {

    # When invoking this toolchain not as the default one, these args will be
    # passed to the build. They are ignored when this is the default toolchain.
    assert(defined(invoker.toolchain_args),
           "Toolchains must declare toolchain_args")
    toolchain_args = {
      # Populate toolchain args from the invoker.
      forward_variables_from(invoker.toolchain_args, "*")

      # The host toolchain value computed by the default toolchain's setup
      # needs to be passed through unchanged to all secondary toolchains to
      # ensure that it's always the same, regardless of the values that may be
      # set on those toolchains.
      # host_toolchain = host_toolchain
    }

    cl = "${clang_base_path}/bin/clang-cl"
    link = "${clang_base_path}/bin/lld-link"
    linklib = "${clang_base_path}/bin/llvm-lib"

    # Object files go in this directory. Use label_name instead of
    # target_output_name since labels will generally have no spaces and will be
    # unique in the directory.
    object_subdir = "{{target_out_dir}}/{{label_name}}"

    tool("cc") {
      precompiled_header_type = ""
      pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"

      depsformat = "msvc"
      description = "CC {{output}}"
      outputs = [
        "$object_subdir/{{source_name_part}}.obj",
      ]

      # TODO: Look up what the variable "sys_lib_flags" in Chromium does & if it is necessary.
      command = "$cl /nologo /showIncludes {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
    }

    tool("cxx") {
      precompiled_header_type = ""

      # The PDB name needs to be different between C and C++ compiled files.
      pdbname = "{{target_out_dir}}/{{label_name}}_cc.pdb"

      depsformat = "msvc"
      description = "CXX {{output}}"
      outputs = [
        "$object_subdir/{{source_name_part}}.obj",
      ]

      # TODO: Look up what the variable "sys_lib_flags" in Chromium does & if it is necessary.
      # TODO: /EHa should be removed and added as a config option.
      # TODO: /Zi (which enables symbol files?) should be removed and added on for debug builds.
      # TODO: Same thing with /DUNICODE and /D_UNICODE
      command = "$cl /Zi /DUNICODE /D_UNICODE /EHa /nologo /showIncludes {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
    }

    # TODO: Figure out asm compiling for Windows.
    # The below is copied from Chromium's Mac toolchain.
    #tool("asm") {
    #  # For GCC we can just use the C compiler to compile assembly.
    #  depfile = "{{output}}.d"
    #  command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
    #  depsformat = "gcc"
    #  description = "ASM {{output}}"
    #  outputs = [
    #    "$object_subdir/{{source_name_part}}.o",
    #  ]
    # }

    tool("alink") {
      rspfile = "{{output}}.rsp"
      # rspfile_content = "{{inputs_newline}}"
      rspfile_content = "{{inputs_newline}}"

      # TODO: Look up what the variable "sys_lib_flags" in Chromium does & if it is necessary.
      # TODO: Is the delete necessary?
      # command = "del {{output}} && llvm-lib /nologo ${sys_lib_flags}{{arflags}} /OUT:{{output}} @$rspfile"
      command = "$linklib /nologo {{arflags}} /OUT:{{output}} @$rspfile"

      description = "LIB {{output}}"
      outputs = [
        "{{output_dir}}/{{target_output_name}}.lib",
      ]
      default_output_dir = "{{target_out_dir}}"
      default_output_extension = ".lib"
    }

    tool("solink") {
      dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"  # e.g. foo.dll
      libname = "${dllname}.lib"  # e.g. foo.dll.lib
      pdbname = "${dllname}.pdb"
      rspfile = "${dllname}.rsp"
      # pool = "//build/toolchain:link_pool($default_toolchain)"

      # TODO: Look up what the variable "sys_lib_flags" in Chromium does & if it is necessary.
      # command = "lld-link /nologo ${sys_lib_flags}/IMPLIB:$libname /DLL /OUT:$dllname /PDB:$pdbname @$rspfile"
      command = "$link /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:$pdbname @$rspfile"

      default_output_extension = ".dll"
      default_output_dir = "{{root_out_dir}}"
      description = "LINK(DLL) {{output}}"
      outputs = [
        dllname,
        libname,
      ]

      link_output = libname
      depend_output = libname
      runtime_outputs = [ dllname ]
      if (symbol_level != 0) {
        outputs += [ pdbname ]
        runtime_outputs += [ pdbname ]
      }

      # Since the above commands only updates the .lib file when it changes, ask
      # Ninja to check if the timestamp actually changed to know if downstream
      # dependencies should be recompiled.
      restat = true

      # The use of inputs_newline is to work around a fixed per-line buffer
      # size in the linker.
      rspfile_content = "{{libs}} {{solibs}} {{inputs_newline}} {{ldflags}}"
    }

    tool("solink_module") {
      dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"  # e.g. foo.dll
      pdbname = "${dllname}.pdb"
      rspfile = "${dllname}.rsp"
      # pool = "//build/toolchain:link_pool($default_toolchain)"

      # TODO: Look up what the variable "sys_lib_flags" in Chromium does & if it is necessary.
      # command = "$link /nologo ${sys_lib_flags}/DLL /OUT:$dllname /PDB:$pdbname @$rspfile"
      command = "$link /nologo /DLL /OUT:$dllname /PDB:$pdbname @$rspfile"

      default_output_extension = ".dll"
      default_output_dir = "{{root_out_dir}}"
      description = "LINK_MODULE(DLL) {{output}}"
      outputs = [
        dllname,
      ]
      if (symbol_level != 0) {
        outputs += [ pdbname ]
      }
      runtime_outputs = outputs

      # The use of inputs_newline is to work around a fixed per-line buffer
      # size in the linker.
      rspfile_content = "{{libs}} {{solibs}} {{inputs_newline}} {{ldflags}}"
    }

    tool("link") {
      exename = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      pdbname = "$exename.pdb"
      rspfile = "$exename.rsp"
      # pool = "//build/toolchain:link_pool($default_toolchain)"

      # TODO: Look up what the variable "sys_lib_flags" in Chromium does & if it is necessary.
      # command = "$linker_wrapper$link /nologo ${sys_lib_flags}/OUT:$exename /PDB:$pdbname @$rspfile"
      command = "$link /nologo /DEBUG /OUT:$exename /PDB:$pdbname @$rspfile"

      default_output_extension = ".exe"
      default_output_dir = "{{root_out_dir}}"
      description = "LINK {{output}}"
      outputs = [
        exename,
      ]
      if (symbol_level != 0) {
        outputs += [ pdbname ]
      }
      runtime_outputs = outputs

      # The use of inputs_newline is to work around a fixed per-line buffer
      # size in the linker.
      rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
    }

    tool("stamp") {
      command = stamp_command
      description = stamp_description
    }

    tool("copy") {
      command = copy_command
      description = copy_description
    }

    # tool("action") {
    #   pool = "//build/toolchain:action_pool($default_toolchain)"
    # }
  }
}

# win_toolchain("win_clang_arm") {
#  toolchain_args = {
#    current_cpu = "arm"
#    current_os = "win"
#  }
#}

win_toolchain("win_clang_x64") {
  toolchain_args = {
    current_cpu = "x64"
    current_os = "win"
  }
}

win_toolchain("win_clang_x86") {
  toolchain_args = {
    current_cpu = "x86"
    current_os = "win"
  }
}
